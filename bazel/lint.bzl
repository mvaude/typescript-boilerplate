"Shows how you might create a macro for the autogenerated ESLint rule"

load("@build_bazel_rules_nodejs//:providers.bzl", "DeclarationInfo", "JSModuleInfo")
load("@npm//eslint:index.bzl", _eslint_test="eslint_test")

def _eslint_deps_impl(ctx):
   declarations = []
   files = []

   for dep in ctx.attr.deps:
       if dep[DeclarationInfo]:
           declarations.append(dep[DeclarationInfo].declarations)
       if dep[JSModuleInfo]:
           files.append(dep[JSModuleInfo].sources)

   return [
       DefaultInfo(files = depset(transitive = files + declarations)),
       DeclarationInfo(transitive_declarations = depset(transitive = declarations)),
   ]

_eslint_deps = rule(
   implementation = _eslint_deps_impl,
   attrs = {
       "deps": attr.label_list(),
   }
)


def eslint_test(name, srcs, deps, configs, eslint_args = None, **kwargs):
    "A macro around the autogenerated eslint_test rule"
    if eslint_args == None:
        eslint_args = []
    templated_args = eslint_args + [
        "--format=pretty",
        "--color",
    ]
    for src in srcs:
        templated_args.extend(["$(rootpath %s)" % src])
    eslint_deps = "%s.deps" % name
    _eslint_deps(
        name = eslint_deps,
        deps = deps,
    )

    data = configs + [eslint_deps] + srcs
    _eslint_test(
        name = name,
        data = data,
        templated_args = templated_args,
        **kwargs,
    )